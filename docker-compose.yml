version: '3.8'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes::
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka Service
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Optional: Kafka UI for management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
  web:
    image: sharmakeshav54126293/studyhub-frontend:latest
    env_file: .env
    environment:
      - NODE_ENV=production
    ports:
      - "3009:3009"
    build:
      context: .
      dockerfile: ./docker/Dockerfile.web
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_LIVEKIT_API_KEY: ${NEXT_PUBLIC_LIVEKIT_API_KEY}
        NEXT_PUBLIC_LIVEKIT_API_SECRET: ${NEXT_PUBLIC_LIVEKIT_API_SECRET}
        NEXT_PUBLIC_LIVEKIT_URL: ${NEXT_PUBLIC_LIVEKIT_URL}
        NEXT_PUBLIC_ACCESS_KEY_ID: ${NEXT_PUBLIC_ACCESS_KEY_ID}
        NEXT_PUBLIC_SECRET_ACCESS_KEY: ${NEXT_PUBLIC_SECRET_ACCESS_KEY}
        NEXT_PUBLIC_REGION: ${NEXT_PUBLIC_REGION}
        NEXT_PUBLIC_BUCKET_NAME: ${NEXT_PUBLIC_BUCKET_NAME}
        NEXT_PUBLIC_AWS_URL: ${NEXT_PUBLIC_AWS_URL}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
        FRONTEND_URL: ${FRONTEND_URL}
        NEXT_PUBLIC_FRONTEND_URL: ${NEXT_PUBLIC_FRONTEND_URL}
  http-backend:
    image: sharmakeshav54126293/studyhub-backend:latest
    env_file: .env
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - KAFKA_BROKERS=kafka:9092
    ports:
      - "3007:3007"
    depends_on:
      rabbitmq:
        condition: service_healthy
      kafka:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./docker/Dockerfile.http-backend
      args:
        GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
        GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
        GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
        FRONTEND_URL: ${FRONTEND_URL}
        NEXT_PUBLIC_FRONTEND_URL: ${NEXT_PUBLIC_FRONTEND_URL}
        LIVEKIT_API_KEY: ${LIVEKIT_API_KEY}
        LIVEKIT_API_SECRET: ${LIVEKIT_API_SECRET}
        LIVEKIT_URL: ${LIVEKIT_URL}
        RABBITMQ_URL: ${RABBITMQ_URL}
        ACCESS_KEY_ID: ${ACCESS_KEY_ID}
        SECRET_ACCESS_KEY: ${SECRET_ACCESS_KEY}
        REGION: ${REGION}
        BUCKET_NAME: ${BUCKET_NAME}

  wsserver:
    image: sharmakeshav54126293/wsserver:latest
    env_file: .env
    environment:
      - NODE_ENV=production
      - KAFKA_BROKERS=kafka:9092
    ports:
      - "8081:8081"
    depends_on:
      - kafka

  upload-worker:
    image: sharmakeshav54126293/upload-worker:latest
    env_file: .env
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=amqp://rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./docker/Dockerfile.upload-worker
      args:
        REDIS_HOST: ${REDIS_HOST}
        REDIS_PORT: ${REDIS_PORT}
        ACCESS_KEY_ID: ${ACCESS_KEY_ID}
        SECRET_ACCESS_KEY: ${SECRET_ACCESS_KEY}
        REGION: ${REGION}

  # RabbitMQ Service
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  rabbitmq_data:
  zookeeper_data:
  zookeeper_log:
  kafka_data:




