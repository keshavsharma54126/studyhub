// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  password String
  username String
  firstName String?
  lastName String?
  isEmailVerified Boolean @default(false)
  lastLogin DateTime?
  googleId String?
  profilePicture String?
  sessions Session[]
  sessionRecordings SessionRecording[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session{
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  title String
  description String
  startTime DateTime
  actualStartTime DateTime?
  endTime DateTime?
  secretCode String @unique
  status SessionStatus @default(PENDING)
  slides Slide[]
  sessionRecordings SessionRecording[]
  createdAt DateTime @default(now())
  expiresAt DateTime?
}

model Slide{
  id String @id @default(cuid())
  sessionId String 
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
}

model SessionRecording{
  id String @id @default(cuid())
  sessionId String  @unique
  egressId String?
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  eventType String
  eventData Json
  timestamp DateTime
  createdAt DateTime @default(now())
}

enum SessionStatus{
  PENDING
  ACTIVE
  INACTIVE
} 

